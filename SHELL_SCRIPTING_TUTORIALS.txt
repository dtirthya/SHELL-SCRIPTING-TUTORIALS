SHELL SCRIPTING TUTORIALS

#Location where bash exists

! /bin/bash

#This is a comment

echo "WELCOME TO SHELL PROGRAMMING TUTORIALS!"

#System variables

echo $BASH
echo $BASH_VERSION
echo $PWD

#We can print in this way

echo YOUR PRESENT WORKING DIRECTORY IS: $PWD

#Declaring and printing a variable

name=MAX
echo HI $name! #To access the value of the variable, we have to pt a $ before it.

#Reading user input

echo "ENTER NAME: "
read var_name #Name of the variable in which we want to store
echo HELLO $var_name!

#Reading multiple inputs

echo "ENTER NAMES: "
read name_one name_two name_three
echo "THE NAMES ARE: $name_one, $name_two, $name_three"

#Another way

read -p 'USERNAME: ' user_name #Reading on the same line
echo USERNAME: $user_name

#Read hidden text (for example, a user's password)

read -p "USERNAME: " user_name
read -sp "PASSWORD: " pass_word
echo YOUR USERNAME IS: $user_name AND PASSWORD IS: $pass_word!

#Creating an array and displaying

echo "ENTER THE NAMES: "
read -a names
echo "NAMES: ${names[0]}, ${names[1]}"

#If we dont specify a varable when reading, the default variable 'REPLY' stores that data. For example,

echo "ENTER YOUR NAME: "
read
echo HELLO $REPLY!

#Passing arguments

$1 $2 $3 #First argument starts from $1. Then from there the number increases accrding to the number of arguments like $1, $2, $3,...,$n upto 'n' arguments. $0 is the shell script itself.
args=("$@") #Stores the arguments in an array
echo ${args[0]}, ${args[1]}, ${args[2]} #Prints the elements of the array
echo $@ #Prints all the arguments
echo $# #Prints the number of arguments

#if statement

$1
if [ $1 -ge 18 ]
then
  echo "YOU ARE ELIGIBLE TO VOTE!"
else
  echo "YOU ARE NOT ELIGIBLE TO VOTE!"
fi

#For more details on if statements, visit the link and also support the content creator
#Link- http://www.codebind.com/linux-tutorials/bash-shell-scripting-statement-fi-else-fi-elif-else-fi/

#File test operations

#Checking whether a file is there in our directory

echo -e "ENTER THE NAME OF THE FILE: \c" #-e flag is used to read the name in the same line, used with \c
read name
if [ -e $name ] #-e flag is used to check whether the file is there or not and whether it is a regular file. -d flag is used in case of directory. For block special -b, and for character special -c. -s checks whether the file is empty or not. -r,-w,-x flags checks whether the fle has read, write or execute permissions respectively.
then
  echo "$name" is found!
else
  echo "$name" is not found!
fi

#Append text to the end of a File

echo -e "ENTER THE NAME OF THE FILE: \c"
read name
if [ -f $name ]
then
  if [ -w $name ]
  then
    echo "ENTER TEXT TO BE WRITTEN (PRESS CTRL+C TO EXIT): "
    cat >> $name
  else
    echo "THE FILE DOES NOT HAVE WRITE PERMISSIONS"
  fi
else
  echo "THE FILE DOES NOT EXISTS!"
fi

#Use of AND operator

read -p "ENTER YOUR AGE: " age
if [ $age -gt 4 ] && [ $age -lt 10 ] #We can use -a flag instead of using &&. In that case the syntax will be: if [ $age -gt 4 -a $age -lt 10 ]
then
  echo "YOU ARE ELIGIBLE!"
else
  echo "YOU ARE NOT ELIGIBLE!"
fi

#Use of OR operator

read -p "ENTER YOUR AGE: " age
if [ $age -ge 18 ] || [ "$age" -le 50 ] #We can use -o flag instead of using &&. In that case the syntax will be: if [ $age -ge 18 -o $age -le 50 ]
then
  echo "YOU ARE ELIGIBLE!"
else
  echo "YOU ARE NOT ELIGIBLE!"
fi

#We can use both AND and OR operators like this:
#Example 1: if [[ syntax_one && syntax_two ]]
#Example 2: if [[ syntax_one || syntax_two ]]
#Example 3: if [[ syntax_one -a syntax_two ]]
#Example 4: if [[ syntax_one -o syntax_two ]]

#Basic integer arithmetic operations

$1 $2
a=$1
b=$2
sum=$(( a + b ))
echo $sum

#Another example

$1 $2 $3
a=$1
b=$2
c=$3
sum=$( expr $a \* $b \* $c ) #We can write in this way. Note: In case of multiplication, we have to use the '\' escape character, when using expr, as when using expr '*' can't be escaped.
echo $sum

#Another example

$1 $2
var=("$@")
echo ${var[0]} ${var[1]}
div=$( expr ${var[0]} - ${var[1]} )
echo $div

#Floating point arithmetic

#Note: bc is a basic calculator which can perform calculations, both simple and floating point.

#Example 1

num_one=1
num_two=2.5
echo "$num_one+$num_two" | bc #Piping is used here where echoing the two numbers in this format serves as imput to bc.
echo "30+23.5" | bc #We can use in this way also.
echo "30+20" | bc #Not floaing point, but basic arithmetic operation.
echo "scale=2;20.5/5" | bc #If we give this command without using scale, the output will be exactly 4.

#Note: scale is a function where we specify upto how many decimal places we want to display our result. Here we are giving scale, a value equal to 2. That means, the result will also show the digits after the decimal point upto two digits.

#Another example

num=5
echo "scale=2;sqrt($num)" | bc -l
echo "scale=2;3.5^3.5" | bc -l

#Note: In order to do sqrt, or exponential or any kind of math function operations, we need to use -l flag with bc.

#Switch case

#Syntax

case expression in
  pattern1 )
    statements ;;
  pattern1 )
    statements ;;
  pattern1 )
    statements ;;
  ...
  ...
  ...
esac

#For example

item = $1
case $item in
  "fruits" )
    echo "GO TO COUNTER NO. 1" ;;
  "vegetables" )
    echo "GO TO COUNTER NO. 2" ;;
  * ) #'*' is a wildcard in linux. It will accept anything. So here it is anything other than fruits and vegetables. It is the default option.
    echo "NOT AVAILABLE HERE!" ;;
esac

#Another example

#Another example

read -p "ENTER A CHARACTER: " value
case $value in
  [a-z] ) #Verifies whether the value is in between small 'a' to 'z'. To verify whether a value is in between two values we use [..-..]
    echo "$value IS IN LOWERCASE!" ;;
  [A-Z] )
    echo "$value IS IN UPPERCASE!" ;;
  [0-11] )
    echo "$value IS WITHIN THE FIRST 10 NATURAL NUMBERS!" ;;
  ? )
    echo "$value IS A SPECIAL CHARACTER!" ;;
  * )
    echo "$value IS AN UNKNOWN INPUT!" ;;
esac

#Note: If you enter in uppercase and the shell recognizes it as a lowercase letter, then prior to running the script, you must enter this command:
LANG=C
in the terminal
